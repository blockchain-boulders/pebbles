
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import TallierContractArtifactJson from './Tallier.json' assert { type: 'json' };
export const TallierContractArtifact = TallierContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Tallier;
 */
export class TallierContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, TallierContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, TallierContract.artifact, wallet) as Promise<TallierContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, ) {
    return new DeployMethod<TallierContract>(Point.ZERO, wallet, TallierContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, ) {
    return new DeployMethod<TallierContract>(publicKey, wallet, TallierContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return TallierContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** calculateResult() */
    calculateResult: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** readIndex() */
    readIndex: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** readVote(index: field) */
    readVote: ((index: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** readVoteCounter(value: field) */
    readVoteCounter: ((value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** receiveVote(vote: field, voterAddress: field) */
    receiveVote: ((vote: FieldLike, voterAddress: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
