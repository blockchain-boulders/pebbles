{
  "name": "Tallier",
  "functions": [
    {
      "name": "calculateResult",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "readVoteCounter",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "value",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/81WW26DMBA0j0BMKEkP0MoniCCq1J9K5QztCZBC+0OKBFS9fmOyq05df1SKrWQl4sXr7MzOgnEohAjEySLw0XiuprE8z6rAXa4S+YbH65l8SfdoCfi1I/zEvT7lArhKoz5tBcVjt7g7Sc+ArfembgLwNZeFWy6zronbnA86Rwr8uVbmvoJ4AmPqlsf8/C/Eb035Hvn9l2t4Ya6++r90m3OXU07WcmloivVkjuvROfhdjgErA8zcQ+9WlCugizEk4N54wM1BW+TBWBGsuYcYrzP74UMbtBp8xkIuwYW5SPF3L5YQT2EuNP6re/AI8YL80JKnsKzD2tceakecGu4ZKwMOxRVwSS1cNm65zPvFrfgx7s8GeDAnXifBX8NcaKxLiXPkWD8P34FK8+dzhoDeoNXgM77e2/n9Had+aN7bl7bZB5AiNtLhcRH9CKTkY0EMc/j51ZYKyzG6prE8zyosQFgKsMXvaHyi8fWkhxq7flKl+jj+Nl3Xf7X7rcLYqA6f46TGqRkm9Tb0B1VtvwGozJm7MAwAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "receiveVote",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "vote",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "voterAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "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ax5I1jiVrHEvWOJascSxZ41iyxrFkjWPJGseSNY4laxxL1jiWrHEsWeNYssaxZI1jyRrHkjWOJWscS9Y4lqxxLFnjWLLGsWTOsWTOsWTOsWTOsWT+wExb51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51gy51iy4Fiy4Fiy4Fiy4FiyeGCmbXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWXAsWedYss6xZJ1jyTrHkvUHZtp2jiXrHEvWOZascyxZ51iyzrFknWPJOseSdY4l6xxL1jmWrHMsWedYss6xZJ1jyTrHknWOJescS9Y5lqxzLFnnWLLOsWSdY8k6x5J1jiXrHEvWOZascyxZ51iyzrFknWPJOseSdY4l6xxL1jmWrHMsWedYss6xZJ1jyTrHknWOJescS9Y5lqxzLFnnWLLOsWSdY8k6x5J1jiXrHEvWOZascyxZ51iyzrFknWPJOseSdY4l6xxL1jmWrHMsWedYss6xZJ1jyTrHknWOJescS9Y5lqx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nLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNvnLNsXLNsXLNsXLNsXLNsXD9RUDpbtC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5btC5bt6yzb11m2r7NsX2fZvv5ATeXOsn2dZfs6y/Z1lu3rLNvXWbavs2xfZ9m+zrJ9nWX7Osv2dZbt6yzb11m2r7NsX2fZvs6yfZ1l+zrL9nWW7ess29dZtq+zbF9n2b5ebPui+UecaD/G+e1Lm30kb61/vnTaR/JiBvjK5LWz/pXJN4+F9fm2tPXT5LP3f750rvFr7quXLv946Zq//hF9fobZPBTOhNk8Es6E2TwQzoTZPA7OhNk8DM6E2TwKzoTZPAiOhNlhwjNhNuP6TBjSBN4xwjNhSBN4RwjPhCFN4B0fPBPm2xN4pX38RezR5s/TzP7Dax8//zP6x0tn/PBfbZ/Bvz2tDwXfgUR+8G8/BU4F//YT41Twbz9dTgX/9pPoVPCvn1pt/PQKL+0mdsTyVJyvn1ylcb5+dpXG+fqJVBlnRyxPxfn66VEa5+tnQmmcryd9aZyv53dpHNZU3hHLU3FYU3lHLE/FYU3lHbE8FYc1lXfE8lQc1lTeEctTcVhTeUcsT8VhTeUdsTwVhzWVd8TyVBzWVN4Ry1NxWFN5RyxPxWFN5R2xPBWHNZV3xPJUHNZU3hHLU3FYU3lHLE/FYU3lHbE8FYc1lXfE8lQc1lTeEctTcVBTeeyI5ak4qKk8dsTyVBzUVB4P1FQeO2J5Kg5qKo8dsTwVBzWVx45YHoqzI5an4rCm8o5YnorDmso7YnkqDmsq74jlqTisqbwjlqfisKbyjlieisO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",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJzNld1qhDAQRt8l11KcyeTPVym9kHYLC4tbqneL775daqygTS6yTOZO4ZvxCMn5bupyfe+n83UYVXdT7YtV3etNjV/98Hgfp/57Uh0GxEadho/Ho9Fzoz7Pl5PqYG52WW/MEvXBrkl3FA06RoP/W6r9/Nb8kDgxJF4MSRBDAq0cFJCDgnJQtBwUkoNi5KDIUS3IcS3IkS3IsS3KsS3KsS0W2zY4WKLQok+zgDNrOGCb/kUdo542a3HhLlZzJe5ij1fiLpZ+Je7ihqjEXVwnlbiLu6cSd3FR1eHW+Vaz6f2ANmZBa739wj6snV2yBG6NWlpg8r3GCJNvNkaYfF0xwuQ7iBEmXyyMMPm2YITJVwAjTN7rjDB5WfPBkCQDkyQDkyQDkyQDkyQDkyQDkyQDkyQDkyQDE6+BCXWEIdzC7KMIkRvRrFEPv9yGV9bP4+b1+vO4j90CPs4Ysztb5lgB6Znjm5qeOb5Q6Znjc//vzDzfAeLZLu8=",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "contract Tallier {\n\n    use dep::aztec::{\n        context::{PublicContext, Context},\n        state_vars::{public_state::PublicState, map::Map},\n        types::type_serialization::{\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n\n    };\n\n    struct Storage {\n        votes: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        voterAddresses: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        voteCounter: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        votingResults: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                votes: Map::new(\n                    context,\n                    1,\n                    |context, slot| {\n                        PublicState::new(\n                            context,\n                            slot,\n                            FieldSerializationMethods,\n                        )\n                    },\n                ),\n                voterAddresses: Map::new(\n                    context,\n                    2,\n                    |context, slot| {\n                        PublicState::new(\n                            context,\n                            slot,\n                            FieldSerializationMethods,\n                        )\n                    },\n                ),\n                voteCounter: PublicState::new(\n                    context,\n                    3,\n                    FieldSerializationMethods,\n                ),\n                votingResults: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        PublicState::new(\n                            context,\n                            slot,\n                            FieldSerializationMethods,\n                        )\n                    },\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(public)]\n    fn receiveVote(\n        vote: Field,\n        voterAddress: Field\n    ) {\n        assert(vote as u32 > 0, \"vote should be greater than 0\");\n        assert(storage.votes.at(voterAddress).read() as u32 <= 0, \"already voted\");\n\n        storage.voterAddresses.at(storage.voteCounter.read()).write(voterAddress);\n        storage.votes.at(voterAddress).write(vote);\n        storage.voteCounter.write(storage.voteCounter.read() + 1);\n    }\n\n    #[aztec(public)]\n        fn calculateResult() {\n            for i in 0..storage.voteCounter.read() {\n                let voter = storage.voterAddresses.at(i).read();\n                let vote = storage.votes.at(voter).read();\n                storage.votingResults.at(vote).write(storage.votingResults.at(vote).read() + 1);\n            }\n    }\n\n    \n\n    unconstrained fn readVoteCounter(value: Field) -> Field {\n        storage.votingResults.at(value).read()\n    }\n}\n",
        "path": "/Users/pandelissymeonidis/Projects/pebbles/packages/voting/src/contracts/tallier/src/main.nr"
      },
      "31": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "34": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/Users/pandelissymeonidis/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "37": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/pandelissymeonidis/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "38": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/Users/pandelissymeonidis/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "64": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/pandelissymeonidis/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "71": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/pandelissymeonidis/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"
      },
      "72": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/pandelissymeonidis/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/Users/pandelissymeonidis/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/types/type_serialization/field_serialization.nr"
      }
    }
  }
}